version: "3.5"

services:

  prometheus:
    image: "prom/prometheus:${PROMETHEUS_TAG}"
    user: "0"
    volumes:
      - ./services/prometheus/:/etc/prometheus/
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - ${PROMETHEUS_PORT}:9090
    links:
      - portainer:portainer
    depends_on:
      - portainer
    restart: always
    stop_grace_period: 60s
    extra_hosts:
      - "host.docker.internal:host-gateway"

  node-exporter:
    image: "prom/node-exporter:${PROMETHEUS_NODE_EXPORTER_TAG}"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - ${PROMETHEUS_NODE_EXPORTER_PORT}:9100
    restart: always
    stop_grace_period: 60s

  alertmanager:
    image: "prom/alertmanager:${PROMETHEUS_ALERT_MANAGER_TAG}"
    ports:
      - ${PROMETHEUS_ALERT_MANAGER_PORT}:9093
    volumes:
      - ./data/alertmanager/:/etc/alertmanager/
      - ./services/alertmanager/config.yaml:/etc/alertmanager/config.yaml
    restart: always
    stop_grace_period: 60s
    command:
      - '--config.file=/etc/alertmanager/config.yaml'
      - '--storage.path=/alertmanager'

  grafana:
    image: "grafana/grafana:${GRAFANA_TAG}"
    container_name: "${ML_PIPELINE_PROJECT_NAME}_grafana"
    user: "0"
    hostname: grafana
    restart: always
    stop_grace_period: 60s
    links:
      - prometheus:prometheus
    depends_on:
      - prometheus
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      GF_INSTALL_PLUGINS: $GF_INSTALL_PLUGINS
    volumes:
      - ./data/grafana:/var/lib/grafana

  portainer:
    image: "portainer/portainer:${PORTAINER_TAG}"
    container_name: "${ML_PIPELINE_PROJECT_NAME}_portainer"
    command: --no-auth -H unix:///var/run/docker.sock
    stop_grace_period: 60s
    restart: always
    ports:
      - ${PORTAINER_PORT}:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  postgres:
    image: "postgres:${POSTGRES_TAG}"
    container_name: "${ML_PIPELINE_PROJECT_NAME}_postgres"
    hostname: postgres
    restart: always
    stop_grace_period: 60s
    environment:
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_DB: $DB_NAME
      POSTGRES_USER: $DB_USER
    ports:
      - ${DB_PORT}:5432
    volumes:
      - /var/lib/postgresql/data
      - ./data/postgres:/var/data

  adminer:
    image: "adminer:${ADMINER_TAG}"
    container_name: "${ML_PIPELINE_PROJECT_NAME}_adminer"
    stop_grace_period: 60s
    restart: always
    ports:
      - ${ADMINER_PORT}:8080

networks:
  default:
      name: ml_pipeline