#################################################################################################################
# From https://airflow.apache.org/docs/apache-airflow/2.0.1/docker-compose.yaml
# With my own modifications, of course...

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME         - Docker image name used to run Airflow.
#                              Default: apache/airflow:master-python3.8
# AIRFLOW_UID                - User ID in Airflow containers
#                              Default: 50000
# AIRFLOW_GID                - Group ID in Airflow containers
#                              Default: 50000
# _AIRFLOW_WWW_USER_USERNAME - Username for the administrator account.
#                              Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD - Password for the administrator account.
#                              Default: airflow

version: "3.5"

services:
  python:
    image: "python:${PYTHON_TAG}"
    container_name: "${PROJECT_NAME}_python"
    volumes:
      - .data/python:/home

  tidyverse:
    image: "rocker/tidyverse:${TIDYVERSE_TAG}"
    container_name: "${PROJECT_NAME}_tidyverse"
    hostname: tidyverse
    stop_grace_period: 60s
    restart: always
    environment:
      USER: "$R_STUDIO_USER"
      PASSWORD: "$R_STUDIO_PASSWORD"
      ROOT: "TRUE"
      DISABLE_AUTH: "TRUE"
    ports:
      - ${R_STUDIO_PORT}:8787 
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - .data/r:/home

  postgres:
    image: "postgres:${POSTGRES_TAG}"
    container_name: "${PROJECT_NAME}_postgres"
    stop_grace_period: 60s
    restart: always
    environment:
      POSTGRES_PASSWORD: "$DB_PASSWORD"
      POSTGRES_DB: "$DB_NAME"
      POSTGRES_USER: "$DB_USER"
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$DB_USER"]
      interval: 5s
      retries: 5

  redis:
    image: "redis:${REDIS_TAG}"
    container_name: "${PROJECT_NAME}_redis"
    stop_grace_period: 60s
    restart: always
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50

  grafana:
    image: "grafana/grafana:${GRAFANA_TAG}"
    container_name: "${PROJECT_NAME}_grafana"
    hostname: grafana
    restart: always
    stop_grace_period: 60s
    user: "0"
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      GF_INSTALL_PLUGINS: "$GF_INSTALL_PLUGINS"
    depends_on:
      - postgres
    volumes:
      - ./data/grafana:/var/lib/grafana      
  
  adminer:
    image: "adminer:${ADMINER_TAG}"
    container_name: "${PROJECT_NAME}_adminer"
    stop_grace_period: 60s
    restart: always
    ports:
      - "${ADMINER_PORT}:8080"

  portainer:
    image: "portainer/portainer:${PORTAINER_TAG}"
    container_name: "${PROJECT_NAME}_portainer"
    command: --no-auth -H unix:///var/run/docker.sock
    stop_grace_period: 60s
    restart: always
    ports:
      - "${PORTAINER_PORT}:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
     
  airflow-webserver:
    image: "apache/airflow:${AIRFLOW_TAG}"
    command: webserver
    ports:
      - "${AIRFLOW_PORT}:8080"
    environment:
      AIRFLOW_PORT: "$AIRFLOW_PORT"
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://${DB_USER}:${DB_PASSWORD}@postgres/${DB_NAME}"
      AIRFLOW__CELERY__RESULT_BACKEND: "db+postgresql://${DB_USER}:${DB_PASSWORD}@postgres/${DB_NAME}"
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    volumes:
      - /opt/airflow/dags
      - /opt/airflow/logs
      - /opt/airflow/plugins
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
    depends_on:
      - redis
      - postgres

  airflow-scheduler:
    image: "apache/airflow:${AIRFLOW_TAG}"
    command: scheduler
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://${DB_USER}:${DB_PASSWORD}@postgres/${DB_NAME}"
      AIRFLOW__CELERY__RESULT_BACKEND: "db+postgresql://${DB_USER}:${DB_PASSWORD}@postgres/${DB_NAME}"
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    volumes:
      - /opt/airflow/dags
      - /opt/airflow/logs
      - /opt/airflow/plugins
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
    depends_on:
      - redis
      - postgres   

  airflow-worker:
    image: "apache/airflow:${AIRFLOW_TAG}"
    command: celery worker
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://${DB_USER}:${DB_PASSWORD}@postgres/${DB_NAME}"
      AIRFLOW__CELERY__RESULT_BACKEND: "db+postgresql://${DB_USER}:${DB_PASSWORD}@postgres/${DB_NAME}"
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    volumes:
      - /opt/airflow/dags
      - /opt/airflow/logs
      - /opt/airflow/plugins
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
    depends_on:
      - redis
      - postgres 

  airflow-init:
    image: "apache/airflow:${AIRFLOW_TAG}"
    command: version
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://${DB_USER}:${DB_PASSWORD}@postgres/${DB_NAME}"
      AIRFLOW__CELERY__RESULT_BACKEND: "db+postgresql://${DB_USER}:${DB_PASSWORD}@postgres/${DB_NAME}"
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    volumes:
      - /opt/airflow/dags
      - /opt/airflow/logs
      - /opt/airflow/plugins
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
    depends_on:
      - redis
      - postgres

  flower:
    image: "apache/airflow:${AIRFLOW_TAG}"
    command: celery flower
    ports:
      - "${FLOWER_PORT}:5555"
    environment:
      AIRFLOW_PORT: "$AIRFLOW_PORT"
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://${DB_USER}:${DB_PASSWORD}@postgres/${DB_NAME}"
      AIRFLOW__CELERY__RESULT_BACKEND: "db+postgresql://${DB_USER}:${DB_PASSWORD}@postgres/${DB_NAME}"
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always     
    volumes:
      - /opt/airflow/dags
      - /opt/airflow/logs
      - /opt/airflow/plugins
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
    depends_on:
      - redis
      - postgres   

networks:
  default:
      name: ml_pipeline_testing 